<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="originalContent" value="# Flask API for BGS-Tally Data&#10;&#10;## Project Description&#10;This project provides a RESTful API for receiving, storing, and processing Background Simulation (BGS) and Thargoid War activity data for the game Elite Dangerous. It is designed to integrate with BGS-Tally and other tools to support faction management and war tracking.&#10;&#10;## Features&#10;- Receive BGS and Thargoid War activity data via POST and PUT requests&#10;- Store incoming data in a database&#10;- Send notifications to Discord via webhooks&#10;- Scheduled shoutouts and tick monitoring&#10;- Conflict detection and reporting&#10;&#10;## API Endpoints&#10;&#10;The following API endpoints are available. Their specification is based on the description in `bgs_tally_openapi.json`, which forms the basis for development. All API functions are also included in `postman_collection.json` for use with the Postman software.&#10;&#10;- `GET /discovery` : Discover information about this server and its API capabilities&#10;- `PUT /activities` : Add or update activity for a given tick&#10;- `POST /events` : Post one or more Journal or Synthetic Events&#10;- `GET /objectives` : Get a set of objectives to achieve in-game&#10;- `POST /objectives` : Create a new objective&#10;&#10;## Installation&#10;&#10;1. **Clone the repository**&#10;   ```bash&#10;   git clone https://github.com/yourusername/EICFlaskServer.git&#10;   cd EICFlaskServer&#10;   ```&#10;&#10;2. **Install dependencies**&#10;   ```bash&#10;   pip install -r requirements.txt&#10;   ```&#10;&#10;3. **Create a `.env` file for production**&#10;   Create a file named `.env` in the project root with the following content:&#10;   ```&#10;   DISCORD_WEBHOOK_URL_PROD=https://discord.com/api/webhooks/your_prod_webhook&#10;   DISCORD_WEBHOOK_URL_DEV=https://discord.com/api/webhooks/your_dev_webhook&#10;   DATABASE_URL=your_database_connection_string&#10;   # Add other required environment variables here&#10;   ```&#10;&#10;4. **Run the server**&#10;   ```bash&#10;   python app.py&#10;   ```&#10;&#10;## Credits&#10;This project was developed by Cmdr JanJonTheo.&#10;&#10;## Disclaimer&#10;This project is not affiliated with or endorsed by Frontier Developments Inc., the creators of Elite Dangerous.&#10;&#10;## Special Thanks&#10;Special thanks to Aussi and Cmdr NavlGazr from BGS-Tally for their support and assistance.&#10;" />
              <option name="updatedContent" value="![VALT Logo](static/VALT_logo.jpg)&#10;&#10;# Flask API for BGS-Tally Data&#10;&#10;## Project Description&#10;This project provides a RESTful API for receiving, storing, and processing Background Simulation (BGS) and Thargoid War activity data for the game Elite Dangerous. It is designed to integrate with BGS-Tally and other tools to support faction management and war tracking.&#10;&#10;## Features&#10;- Receive BGS and Thargoid War activity data via POST and PUT requests&#10;- Store incoming data in a database&#10;- Send notifications to Discord via webhooks&#10;- Scheduled shoutouts and tick monitoring&#10;- Conflict detection and reporting&#10;&#10;## API Endpoints&#10;&#10;The following API endpoints are available. Their specification is based on the description in `bgs_tally_openapi.json`, which forms the basis for development. All API functions are also included in `postman_collection.json` for use with the Postman software.&#10;&#10;**Events**&#10;- `POST /events` : Submit one or more Journal or Synthetic Events&#10;&#10;**Activities**&#10;- `PUT /activities` : Add or update activity for a given tick&#10;&#10;**Summary APIs**&#10;- `GET /api/summary/market-events`&#10;- `GET /api/summary/missions-completed`&#10;- `GET /api/summary/missions-failed`&#10;- `GET /api/summary/bounty-vouchers`&#10;- `GET /api/summary/combat-bonds`&#10;- `GET /api/summary/influence-by-faction`&#10;- `GET /api/summary/influence-eic`&#10;- `GET /api/summary/exploration-sales`&#10;- `GET /api/summary/bounty-fines`&#10;- `GET /api/bounty-vouchers`&#10;- `GET /api/syntheticcz-summary`&#10;- `GET /api/syntheticgroundcz-summary`&#10;&#10;**Top 5 APIs**&#10;- `GET /api/summary/top5/market-events`&#10;- `GET /api/summary/top5/missions-completed`&#10;- `GET /api/summary/top5/bounty-vouchers`&#10;- `GET /api/summary/top5/combat-bonds`&#10;- `GET /api/summary/top5/influence-eic`&#10;- `GET /api/summary/top5/exploration-sales`&#10;&#10;**Discord Integration**&#10;- `POST /api/summary/discord/top5all`&#10;- `POST /api/summary/discord/tick`&#10;- `POST /api/summary/discord/syntheticcz`&#10;- `POST /api/summary/discord/syntheticgroundcz`&#10;&#10;**Database Tables**&#10;- `GET /api/table/event`&#10;- `GET /api/table/market_buy_event`&#10;- `GET /api/table/activity`&#10;- `GET /api/table/cmdr`&#10;- `GET /api/table/objective`&#10;- `GET /api/table/objective_target`&#10;- `GET /api/table/objective_target_settlement`&#10;&#10;**Leaderboard &amp; Recruits**&#10;- `GET /api/summary/leaderboard`&#10;- `GET /api/summary/recruits`&#10;&#10;**Objectives**&#10;- `POST /api/objectives`&#10;- `GET /api/objectives`&#10;- `GET /api/objectives?system=Sol`&#10;- `GET /api/objectives?faction=Federal Navy`&#10;- `GET /api/objectives?active=true`&#10;- `DELETE /api/objectives/&lt;id&gt;`&#10;- `GET /objectives`&#10;- `POST /objectives`&#10;- `DELETE /objectives/&lt;id&gt;`&#10;&#10;**Authentication**&#10;- `POST /api/login`&#10;&#10;**Debug &amp; Sync**&#10;- `POST /api/debug/tick-change`&#10;- `POST /api/sync/cmdrs`&#10;&#10;**Discovery &amp; Health**&#10;- `GET /discovery`&#10;&#10;## Installation&#10;&#10;1. **Clone the repository**&#10;   ```bash&#10;   git clone https://github.com/yourusername/EICFlaskServer.git&#10;   cd EICFlaskServer&#10;   ```&#10;&#10;2. **Install dependencies**&#10;   ```bash&#10;   pip install -r requirements.txt&#10;   ```&#10;&#10;3. **Create a `.env` file for production**&#10;   Create a file named `.env` in the project root with the following content:&#10;   ```&#10;   DISCORD_WEBHOOK_URL_PROD=https://discord.com/api/webhooks/your_prod_webhook&#10;   DISCORD_WEBHOOK_URL_DEV=https://discord.com/api/webhooks/your_dev_webhook&#10;   DATABASE_URL=your_database_connection_string&#10;   # Add other required environment variables here&#10;   ```&#10;&#10;4. **Run the server**&#10;   ```bash&#10;   python app.py&#10;   ```&#10;&#10;## Credits&#10;This project was developed by Cmdr JanJonTheo.&#10;&#10;## Disclaimer&#10;This project is not affiliated with or endorsed by Frontier Developments Inc., the creators of Elite Dangerous.&#10;&#10;## Special Thanks&#10;Special thanks to Aussi and Cmdr NavlGazr from BGS-Tally for their support and assistance." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/create_syntheticcz_tables_and_parse_events.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/create_syntheticcz_tables_and_parse_events.py" />
              <option name="updatedContent" value="from models import db, Event, SyntheticCZ, SyntheticGroundCZ&#10;from flask import Flask&#10;from sqlalchemy import inspect&#10;&#10;app = Flask(__name__)&#10;app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///your_database.db'  # ggf. anpassen&#10;db.init_app(app)&#10;&#10;def table_exists(table_name):&#10;    inspector = inspect(db.engine)&#10;    return table_name in inspector.get_table_names()&#10;&#10;def create_tables_if_missing():&#10;    with app.app_context():&#10;        if not table_exists('synthetic_cz'):&#10;            SyntheticCZ.__table__.create(db.engine)&#10;        if not table_exists('synthetic_ground_cz'):&#10;            SyntheticGroundCZ.__table__.create(db.engine)&#10;&#10;def parse_and_insert_events():&#10;    with app.app_context():&#10;        events = Event.query.all()&#10;        for event in events:&#10;            if event.event == &quot;SyntheticCZ&quot;:&#10;                # Annahme: relevante Felder sind im raw_json gespeichert&#10;                import ast&#10;                data = ast.literal_eval(event.raw_json)&#10;                new_entry = SyntheticCZ(&#10;                    event_id=event.id,&#10;                    low=data.get('low'),&#10;                    faction=data.get('faction'),&#10;                    cmdr=data.get('cmdr'),&#10;                    station_faction_name=data.get('station_faction_name')&#10;                )&#10;                db.session.add(new_entry)&#10;            elif event.event == &quot;SyntheticGroundCZ&quot;:&#10;                import ast&#10;                data = ast.literal_eval(event.raw_json)&#10;                new_entry = SyntheticGroundCZ(&#10;                    event_id=event.id,&#10;                    low=data.get('low'),&#10;                    settlement=data.get('settlement'),&#10;                    faction=data.get('faction'),&#10;                    cmdr=data.get('cmdr'),&#10;                    station_faction_name=data.get('station_faction_name')&#10;                )&#10;                db.session.add(new_entry)&#10;        db.session.commit()&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    create_tables_if_missing()&#10;    parse_and_insert_events()&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/server.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/server.py" />
              <option name="updatedContent" value="# ...existing code...&#10;&#10;@app.route('/objectives/&lt;int:objective_id&gt;', methods=['DELETE'])&#10;def delete_objective(objective_id):&#10;    &quot;&quot;&quot;&#10;    Löscht ein Objective und alle zugehörigen Child-Datensätze.&#10;    &quot;&quot;&quot;&#10;    from flask import jsonify&#10;    from sqlalchemy.exc import SQLAlchemyError&#10;    # ...existing code (z.B. db Session import)...&#10;    try:&#10;        # Hole das Objective&#10;        objective = Objective.query.get(objective_id)&#10;        if not objective:&#10;            return jsonify({'error': 'Objective not found'}), 404&#10;&#10;        # Lösche zugehörige Child-Datensätze (z.B. SubObjectives, Tasks, etc.)&#10;        # Beispiel: Wenn die Beziehungen als backref gesetzt sind&#10;        for child in objective.subobjectives:&#10;            db.session.delete(child)&#10;        for child in objective.tasks:&#10;            db.session.delete(child)&#10;        # ...weitere Child-Tabellen nach Bedarf...&#10;&#10;        # Lösche das Objective selbst&#10;        db.session.delete(objective)&#10;        db.session.commit()&#10;        return jsonify({'message': 'Objective und zugehörige Daten gelöscht'}), 200&#10;    except SQLAlchemyError as e:&#10;        db.session.rollback()&#10;        return jsonify({'error': str(e)}), 500&#10;&#10;# ...existing code...&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/update_syntheticcz_faction.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/update_syntheticcz_faction.py" />
              <option name="updatedContent" value="import json&#10;from models import db, SyntheticCZ, SyntheticGroundCZ, Event&#10;from flask import Flask&#10;&#10;app = Flask(__name__)&#10;app.config[&quot;SQLALCHEMY_DATABASE_URI&quot;] = &quot;sqlite:///bgs_data.db&quot;&#10;app.config[&quot;SQLALCHEMY_TRACK_MODIFICATIONS&quot;] = False&#10;db.init_app(app)&#10;&#10;def update_faction_fields():&#10;    with app.app_context():&#10;        # SyntheticCZ aktualisieren&#10;        cz_list = SyntheticCZ.query.all()&#10;        for cz in cz_list:&#10;            event = Event.query.get(cz.event_id)&#10;            if event and event.raw_json:&#10;                try:&#10;                    raw = json.loads(event.raw_json.replace(&quot;'&quot;, '&quot;'))&#10;                    faction = raw.get(&quot;Faction&quot;)&#10;                    if faction and cz.faction != faction:&#10;                        cz.faction = faction&#10;                except Exception:&#10;                    pass&#10;        # SyntheticGroundCZ aktualisieren&#10;        groundcz_list = SyntheticGroundCZ.query.all()&#10;        for gcz in groundcz_list:&#10;            event = Event.query.get(gcz.event_id)&#10;            if event and event.raw_json:&#10;                try:&#10;                    raw = json.loads(event.raw_json.replace(&quot;'&quot;, '&quot;'))&#10;                    faction = raw.get(&quot;Faction&quot;)&#10;                    if faction and gcz.faction != faction:&#10;                        gcz.faction = faction&#10;                except Exception:&#10;                    pass&#10;        db.session.commit()&#10;        print(&quot;Update abgeschlossen.&quot;)&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    update_faction_fields()&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>