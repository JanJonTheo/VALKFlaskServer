{
    "openapi": "3.0.2",
    "info": {
        "title": "BGS-Tally v1.6.0",
        "version": "1.6.0",
        "description": "An API to send and receive Elite Dangerous BGS and Thargoid War activity data reported by CMDRs. This API was designed for use by the BGS-Tally EDMC plugin.",
        "contact": {
            "name": "Aussi",
            "url": "https://github.com/aussig/BGS-Tally"
        },
        "license": {
            "name": "MIT License",
            "url": "https://opensource.org/licenses/MIT"
        }
    },
    "servers": [
        {
            "url": "http://127.0.0.1:8081",
            "description": ""
        }
    ],
    "paths": {
        "/discovery": {
            "summary": "Discover information about this server and its API capabilities",
            "get": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Discovery"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "operationId": "getDiscovery",
                "summary": "Fetch information about the server's capabilities",
                "description": "A discovery response containing information about the application and endpoints "
            }
        },
        "/activities": {
            "summary": "Handle BGS activity reports",
            "put": {
                "requestBody": {
                    "description": "Activity to add",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ActivitiesActivity"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "401": {
                        "description": "No API key was supplied or the API key is invalid"
                    }
                },
                "security": [
                    {
                        "KeyAccessSecurityScheme": [
                        ]
                    }
                ],
                "operationId": "putActivity",
                "summary": "Add or update activity for a given tick",
                "description": "Report activity for a given tick."
            },
            "parameters": [
                {
                    "name": "apiversion",
                    "description": "The version of the API in x.y.z notation.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "header",
                    "required": true
                }
            ]
        },
        "/events": {
            "summary": "Real-time / near real-time event stream",
            "description": "Send event entries generated either from the game journal or for synthetic events generated by the client.",
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/EventsEvent"
                                        },
                                        {
                                            "$ref": "#/components/schemas/EventsSyntheticSpaceCZ"
                                        },
                                        {
                                            "$ref": "#/components/schemas/EventsSyntheticCZObjective"
                                        },
                                        {
                                            "$ref": "#/components/schemas/EventsSyntheticGroundCZ"
                                        },
                                        {
                                            "$ref": "#/components/schemas/EventsSyntheticScenario"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "There was an error with the request. Schema validation failed."
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "No API key was supplied or the API key is malformed"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "API access was denied. Either at the resource, permissions or user level."
                    },
                    "413": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "Event array limit exceeded."
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        },
                        "description": "API call frequency limit exceeded."
                    }
                },
                "security": [
                    {
                        "KeyAccessSecurityScheme": [
                        ]
                    }
                ],
                "operationId": "postEvent",
                "summary": "Post one or more Journal or Synthetic Events",
                "description": "This endpoint is used to post events that the server has requested via the discovery endpoint. Events can either be sourced directly from the game journal or synthesised by the client. Further, discovery allows the server to request that only events with field values matching specific RegEx.\n\nEvents are batched up to a maximum specified in discovery. An array is expected, even if a single event is sent.\n\nA variety of Events are supported:\n\n- EventsEvent: An event passed directly from the game journal. Each event includes all field values passed directly from the Journal - those game-supplied fields are not included in this documentation. However, Events are also enhanced by BGS-Tally and those enhanced fields are documented below. Those additional fields should be treated as required. An event may still be sent with missing unobtainable fields but is not expected to be processed properly.\n- EventsSyntheticSpaceCZ: A synthetic event generated by the client when the user is deemed to have wone a space conflict zone.\n- EventsSyntheticGroundCZ: A synthetic event generated by the client when the user is deemed to have wone a ground conflict zone.\n- EventsSyntheticCZObjective: A synthetic event generated by the client when the user is deemed to have completed an objective within a conflict zone, such as defeating a wing of spec ops ships.\n- EventsSyntheticScenario: A synthetic event generated by the client when the user is deemed to have completed an in-game scenario, such as defending a megaship."
            },
            "parameters": [
                {
                    "name": "apiversion",
                    "description": "The version of the API in x.y.z notation.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "header",
                    "required": true
                }
            ]
        },
        "/objectives": {
            "summary": "Handle BGS activity reports",
            "get": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ObjectivesMission"
                                    }
                                }
                            }
                        },
                        "description": "Success"
                    },
                    "401": {
                        "description": "No API key was supplied or the API key is invalid"
                    }
                },
                "security": [
                    {
                        "KeyAccessSecurityScheme": [
                        ]
                    }
                ],
                "operationId": "getObjectives",
                "summary": "Get a set of objectives to achieve in-game",
                "description": "Objectives are organised into missions, and each mission has one or more targets."
            },
            "parameters": [
                {
                    "name": "apiversion",
                    "description": "The version of the API in x.y.z notation.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "header",
                    "required": true
                }
            ]
        }
    },
    "components": {
        "schemas": {
            "Error": {
                "anyOf": [
                    {
                        "required": [
                            "code",
                            "message"
                        ],
                        "type": "object",
                        "properties": {
                            "code": {
                                "format": "int32",
                                "type": "integer"
                            },
                            "message": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "example": {
                    "code": 400,
                    "message": "Error description"
                }
            },
            "TickID": {
                "description": "The ID of the tick this activity should be associated with. This ID is usually generated by elitebgs.app and is unique but if a tick is forced by the user, a 24 digit tickid will be generated by BGS-Tally with six leading zeroes to identify it as a forced tick.",
                "maxLength": 24,
                "minLength": 24,
                "type": "string",
                "example": "639f422026842f7295280669"
            },
            "Discovery": {
                "description": "Container object for a discovery response",
                "required": [
                    "name",
                    "description"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "description": "The name of this server or application",
                        "type": "string",
                        "example": "Name of a sample server"
                    },
                    "description": {
                        "description": "A description of this server, it's purpose, why it's requesting the data and what it will use the data for.",
                        "type": "string",
                        "example": "Description of a sample server"
                    },
                    "url": {
                        "description": "A URL, accessible via a web browser, for the user to get more information about the server application. It may point to the home page of the application if appropriate.",
                        "type": "string",
                        "example": "https://www.example.com"
                    },
                    "events": {
                        "$ref": "#/components/schemas/DiscoveryEvents",
                        "description": "Configuration of the events this server accepts."
                    },
                    "endpoints": {
                        "$ref": "#/components/schemas/DiscoveryEndpoints",
                        "description": "A definition of the endpoints accepted by this server, and the configuration of each"
                    }
                }
            },
            "DiscoveryEndpoint": {
                "description": "Information about an API endpoint",
                "required": [
                    "minPeriod"
                ],
                "type": "object",
                "properties": {
                    "path": {
                        "description": "The path to this endpoint, relative to the API root URL. Omit leading and trailing slashes.",
                        "type": "string",
                        "example": "path/to/endpoint"
                    },
                    "minPeriod": {
                        "description": "The minimum permitted period between calls to this endpoint by a client.  Clients may set their own minimum period, any value lower than that will be ignored.",
                        "type": "integer",
                        "example": "60"
                    },
                    "maxBatch": {
                        "description": "Only applicable for 'events' endpoints. The maximum permitted number of events to send in a single API call.  Clients may set their own maximum batch size, any value higher than that will be ignored.",
                        "type": "integer",
                        "example": "10"
                    }
                }
            },
            "ActivitiesLMH": {
                "description": "A trio of tracked values, for low, medium and high tracking.",
                "minProperties": 1,
                "required": [
                ],
                "type": "object",
                "properties": {
                    "low": {
                        "$ref": "#/components/schemas/ActivitiesSumCount",
                        "description": "Logged 'low' values"
                    },
                    "high": {
                        "$ref": "#/components/schemas/ActivitiesSumCount",
                        "description": "Logged 'high' values"
                    },
                    "medium": {
                        "$ref": "#/components/schemas/ActivitiesSumCount",
                        "description": "Logged 'medium' values"
                    }
                },
                "additionalProperties": false
            },
            "ActivitiesSettlement": {
                "description": "Data for a ground CZ Settlement",
                "required": [
                    "name",
                    "type",
                    "count"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "description": "The settlement name",
                        "type": "string"
                    },
                    "type": {
                        "description": "The CZ type for this settlement: h | m | l",
                        "type": "string"
                    },
                    "count": {
                        "description": "The number of times this settlement CZ has been completed",
                        "type": "integer"
                    }
                }
            },
            "ActivitiesStation": {
                "description": "Data logged for a particular station",
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "description": "The station name",
                        "type": "string"
                    },
                    "twcargo": {
                        "$ref": "#/components/schemas/ActivitiesSumCount",
                        "description": "Thargoid War cargo missions logged"
                    },
                    "twescapepods": {
                        "$ref": "#/components/schemas/ActivitiesLMH",
                        "description": "Thargoid War escape pod (evac injured and critical injured) missions logged"
                    },
                    "twmassacre": {
                        "$ref": "#/components/schemas/ActivitiesTWVesselsSumCount",
                        "description": "Thargoid massacre missions logged"
                    },
                    "twpassengers": {
                        "$ref": "#/components/schemas/ActivitiesLMH",
                        "description": "Thargoid War passenger missions logged"
                    },
                    "twreactivate": {
                        "description": "Thargoid War reactivation missions logged",
                        "type": "integer"
                    }
                }
            },
            "ActivitiesSumCount": {
                "description": "A pair of values, one representing a sum and the other a count - for example when tracking haulage missions, the sum would contain the number of missions and the count would contain the total number of goods shipped.",
                "required": [
                    "sum",
                    "count"
                ],
                "type": "object",
                "properties": {
                    "sum": {
                        "description": "The sum of the number of activities completed.",
                        "type": "integer"
                    },
                    "count": {
                        "description": "The count of the number of individual items tracked. ",
                        "type": "integer"
                    }
                }
            },
            "ActivitiesTrade": {
                "description": "Contains trade activity organised by bracket - Zero demand, low demand and high demand.",
                "required": [
                    "high",
                    "low"
                ],
                "type": "object",
                "properties": {
                    "zero": {
                        "$ref": "#/components/schemas/ActivitiesTradeBracket",
                        "description": "Zero demand trade bracket. Items not listed on the market, but sold anyway because the player had them in cargo"
                    },
                    "low": {
                        "$ref": "#/components/schemas/ActivitiesTradeBracket",
                        "description": "Low demand trade"
                    },
                    "high": {
                        "$ref": "#/components/schemas/ActivitiesTradeBracket",
                        "description": "High demand trade"
                    }
                }
            },
            "ActivitiesTradeBracket": {
                "description": "",
                "required": [
                    "items",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "items": {
                        "description": "The number of items traded",
                        "type": "integer"
                    },
                    "value": {
                        "description": "The value of the items traded",
                        "type": "integer"
                    },
                    "profit": {
                        "description": "The profit on the items - only applicable for trade sales",
                        "type": "integer"
                    }
                }
            },
            "ActivitiesCZs": {
                "description": "The type and count of each CZ logged for this faction",
                "minProperties": 1,
                "type": "object",
                "properties": {
                    "high": {
                        "description": "The number of high CZs logged.",
                        "minimum": 0,
                        "type": "integer"
                    },
                    "medium": {
                        "description": "The number of medium CZs logged",
                        "type": "integer"
                    },
                    "low": {
                        "description": "The number of low CZs logged",
                        "type": "integer"
                    },
                    "settlements": {
                        "description": "For ground CZs only, an array of Settlements fought at",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ActivitiesSettlement"
                        }
                    }
                },
                "additionalProperties": false
            },
            "DiscoveryEvents": {
                "description": "A description of the events that the server is requesting, and optional filter(s) for each event.\n\nNote only 3 example events are shown here, while in practise any valid E:D event name can be specified.\n\nEnsure that only the specific events you need are included. Requesting some events can cause a lot of traffic to your server, for example FSSSignalDiscovered when entering a large system.\n\nData senders should re-query your discovery endpoint \"regularly\" - at a minimum on initial launch of the sender if it is a desktop application. This allows you to change the set of requested events at any time, and start receiving those events. ",
                "type": "object",
                "properties": {
                    "ApproachSettlement": {
                        "$ref": "#/components/schemas/DiscoveryEvent",
                        "description": ""
                    },
                    "MissionAccepted": {
                        "$ref": "#/components/schemas/DiscoveryEvent",
                        "description": ""
                    },
                    "FactionKillBond": {
                        "$ref": "#/components/schemas/DiscoveryEvent",
                        "description": ""
                    }
                }
            },
            "DiscoveryEvent": {
                "description": "An event accepted by the server, with optional additional filters.",
                "type": "object",
                "properties": {
                    "filters": {
                        "$ref": "#/components/schemas/DiscoveryFilters",
                        "description": "A set of filters to be applied to each particular instance of the event. If all filters match, the event should be sent to the server."
                    }
                }
            },
            "DiscoveryFilters": {
                "description": "Filters to be applied to this event type, where the name is the event field name and the value is a RegEx expression for matching. If the event matches all of the filters, it should be sent to the server.\n\nNote that four example field names are shown here. In practise, any valid E:D event field name found in this event type can be specified.",
                "type": "object",
                "properties": {
                    "Name": {
                        "description": "RegEx expression",
                        "type": "string",
                        "example": "^Mission_TW"
                    },
                    "KillerShip": {
                        "description": "RegEx expression",
                        "type": "string",
                        "example": "scout_hq|scout_nq|scout_q|scout|thargonswarm|thargon"
                    },
                    "AwardingFaction": {
                        "description": "RegEx expression",
                        "type": "string",
                        "example": "^\\\\$faction_PilotsFederation;$"
                    },
                    "VictimFaction": {
                        "description": "RegEx expression",
                        "type": "string",
                        "example": "^\\\\$faction_Thargoid;$"
                    }
                }
            },
            "ActivitiesTWVesselsSumCount": {
                "description": "Thargoid War vessel type missions logged",
                "minProperties": 1,
                "required": [
                ],
                "type": "object",
                "properties": {
                    "cyclops": {
                        "$ref": "#/components/schemas/ActivitiesSumCount",
                        "description": "Cyclops missions logged"
                    },
                    "basilisk": {
                        "$ref": "#/components/schemas/ActivitiesSumCount",
                        "description": "Basilisk missions logged"
                    },
                    "medusa": {
                        "$ref": "#/components/schemas/ActivitiesSumCount",
                        "description": "Medusa missions logged"
                    },
                    "hydra": {
                        "$ref": "#/components/schemas/ActivitiesSumCount",
                        "description": "Hydra missions logged"
                    },
                    "orthrus": {
                        "$ref": "#/components/schemas/ActivitiesSumCount",
                        "description": "Orthrus missions logged"
                    },
                    "scout": {
                        "$ref": "#/components/schemas/ActivitiesSumCount",
                        "description": "Scout missions logged"
                    }
                },
                "additionalProperties": false
            },
            "ActivitiesTWVessels": {
                "description": "Thargoid War vessel type kills logged",
                "minProperties": 1,
                "required": [
                ],
                "type": "object",
                "properties": {
                    "cyclops": {
                        "description": "Cyclops kills logged",
                        "type": "integer"
                    },
                    "basilisk": {
                        "description": "Basilisk kills logged",
                        "type": "integer"
                    },
                    "medusa": {
                        "description": "Medusa kills logged",
                        "type": "integer"
                    },
                    "hydra": {
                        "description": "Hydra kills logged",
                        "type": "integer"
                    },
                    "orthrus": {
                        "description": "Orthrus kills logged",
                        "type": "integer"
                    },
                    "scout": {
                        "description": "Scout kills logged",
                        "type": "integer"
                    },
                    "revenant": {
                        "description": "Revenant kills logged",
                        "type": "integer"
                    },
                    "banshee": {
                        "description": "Banshee kills logged",
                        "type": "integer"
                    },
                    "scythe-glaive": {
                        "description": "Scythe or Glaive kills logged",
                        "type": "integer"
                    }
                },
                "additionalProperties": false
            },
            "ActivitiesActivity": {
                "required": [
                    "tickid",
                    "systems",
                    "cmdr",
                    "timestamp",
                    "ticktime"
                ],
                "properties": {
                    "systems": {
                        "description": "Array of systems with activity",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ActivitiesSystem"
                        }
                    },
                    "cmdr": {
                        "description": "The Commander name",
                        "type": "string"
                    },
                    "timestamp": {
                        "$ref": "#/components/schemas/Timestamp",
                        "description": "The timestamp when this API request was generated"
                    },
                    "tickid": {
                        "$ref": "#/components/schemas/TickID",
                        "description": "The ID of the tick this activity should be associated with. This ID is usually generated by the tick detector and is unique but if a tick is forced by the user, a 24 digit tickid will be generated by BGS-Tally with six leading zeroes to identify it as a forced tick.",
                        "example": ""
                    },
                    "ticktime": {
                        "$ref": "#/components/schemas/Timestamp",
                        "description": "The timestamp for this tick. Note that if this was a tick forced by the user, this will be the time it was forced."
                    }
                }
            },
            "ActivitiesSystem": {
                "description": "BGS data for a star system",
                "required": [
                    "name",
                    "address",
                    "factions"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "description": "The system name",
                        "type": "string"
                    },
                    "address": {
                        "format": "int64",
                        "description": "The unique E:D system address",
                        "type": "integer"
                    },
                    "factions": {
                        "description": "Reported activity per faction",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ActivitiesFaction"
                        }
                    },
                    "twkills": {
                        "$ref": "#/components/schemas/ActivitiesTWVessels",
                        "description": "Number of kills of each Thargoid vessel. Note that kill tracking is UNRELIABLE unless the CMDR solo-kills the vessel."
                    },
                    "twsandr": {
                        "$ref": "#/components/schemas/ActivitiesTWSandR",
                        "description": "Number of Thargoid War Search and Rescue objects recovered"
                    },
                    "twreactivate": {
                        "description": "Number of Thargoid War settlements reactivated ",
                        "type": "integer"
                    }
                }
            },
            "ActivitiesFaction": {
                "description": "BGS activity for a faction",
                "required": [
                    "name",
                    "state"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "description": "The faction name",
                        "type": "string"
                    },
                    "state": {
                        "description": "The primary faction state",
                        "type": "string"
                    },
                    "bvs": {
                        "description": "The Bounty Vouchers logged for this faction",
                        "type": "integer"
                    },
                    "cbs": {
                        "description": "The Combat Bonds logged for this faction",
                        "type": "integer"
                    },
                    "exobiology": {
                        "description": "The value of exobiology data sold for this faction",
                        "type": "integer"
                    },
                    "exploration": {
                        "description": "The value of exploration data sold for this faction",
                        "type": "integer"
                    },
                    "scenarios": {
                        "description": "The number of scenario wins logged for this faction",
                        "type": "integer"
                    },
                    "stations": {
                        "description": "Array of stations with logged activity for this faction",
                        "minItems": 1,
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ActivitiesStation"
                        }
                    },
                    "czground": {
                        "$ref": "#/components/schemas/ActivitiesCZs",
                        "description": "The ground CZs logged for this faction."
                    },
                    "czspace": {
                        "$ref": "#/components/schemas/ActivitiesCZs",
                        "description": "The space CZs logged for this faction"
                    },
                    "infprimary": {
                        "description": "The primary INF logged for this faction",
                        "type": "integer"
                    },
                    "infsecondary": {
                        "description": "The secondary INF logged for this faction",
                        "type": "integer"
                    },
                    "missionfails": {
                        "description": "The number of failed missions logged for this faction",
                        "type": "integer"
                    },
                    "murdersground": {
                        "description": "The number of on-foot murders logged for this faction.",
                        "type": "integer"
                    },
                    "murdersspace": {
                        "description": "The number of ship murders logged for this faction.",
                        "type": "integer"
                    },
                    "tradebm": {
                        "description": "The Black Market profit logged for this faction",
                        "type": "integer"
                    },
                    "tradebuy": {
                        "$ref": "#/components/schemas/ActivitiesTrade",
                        "description": "The trade purchases logged for this faction.",
                        "maxItems": 4,
                        "minItems": 4
                    },
                    "tradesell": {
                        "$ref": "#/components/schemas/ActivitiesTrade",
                        "description": "The trade sales logged for this faction.",
                        "maxItems": 4,
                        "minItems": 4
                    },
                    "sandr": {
                        "$ref": "#/components/schemas/ActivitiesSandR",
                        "description": "The Search and Rescue handins for this faction"
                    }
                }
            },
            "Timestamp": {
                "format": "date-time",
                "description": "Timestamp in YYYY-mm-ddTHH:MM:SS.SSSZ format. Used throughout the API, including as an attribute of the journal event.",
                "type": "string",
                "example": "2022-01-01T00:00:00Z"
            },
            "ActivitiesTWSandR": {
                "description": "Thargoid War Search and Rescue totals",
                "minProperties": 1,
                "required": [
                    "damagedpods",
                    "occupiedpods",
                    "blackboxes",
                    "tissuesamples",
                    "thargoidpods"
                ],
                "type": "object",
                "properties": {
                    "blackboxes": {
                        "description": "Black boxes recovered",
                        "type": "integer"
                    },
                    "damagedpods": {
                        "description": "Damaged escape pods recovered",
                        "type": "integer"
                    },
                    "occupiedpods": {
                        "description": "Occupied escape pods recovered",
                        "type": "integer"
                    },
                    "tissuesamples": {
                        "description": "Tissue samples recovered",
                        "type": "integer"
                    },
                    "thargoidpods": {
                        "description": "Thargoid bio-storage capsules recovered",
                        "type": "integer"
                    }
                },
                "additionalProperties": false
            },
            "ActivitiesSandR": {
                "description": "BGS Search and Rescue totals",
                "minProperties": 1,
                "required": [
                    "damagedpods",
                    "occupiedpods",
                    "blackboxes",
                    "wreckagecomponents",
                    "thargoidpods",
                    "personaleffects",
                    "politicalprisoners",
                    "hostages"
                ],
                "type": "object",
                "properties": {
                    "blackboxes": {
                        "description": "Black boxes recovered",
                        "type": "integer"
                    },
                    "damagedpods": {
                        "description": "Damaged escape pods recovered",
                        "type": "integer"
                    },
                    "occupiedpods": {
                        "description": "Occupied escape pods recovered",
                        "type": "integer"
                    },
                    "thargoidpods": {
                        "description": "Thargoid bio-storage capsules recovered",
                        "type": "integer"
                    },
                    "wreckagecomponents": {
                        "description": "Wreckage components recovered",
                        "type": "integer"
                    },
                    "personaleffects": {
                        "description": "Personal effects recovered",
                        "type": "integer"
                    },
                    "politicalprisoners": {
                        "description": "Political prisoners recovered",
                        "type": "integer"
                    },
                    "hostages": {
                        "description": "Hostages recovered",
                        "type": "integer"
                    }
                },
                "additionalProperties": false
            },
            "EventsEvent": {
                "description": "Journal event. Most data is passed directly from the logged event, including Frontier's ideosynchracies and inconsistencies. This is by design for flexibility.\n\nAdditional journal event properties must be included in each event as per Frontier's journal spec for each event type.\n\nSome events are augmented with additional properties (listed below). Those must be provided to the maximum extend possible for ease of implementation on the server side. If unavailable, an event may be sent with missing augmentations but is not expected to be properly processed.",
                "required": [
                    "event",
                    "timestamp"
                ],
                "type": "object",
                "properties": {
                    "event": {
                        "description": "The event attribute of the journal event. The default set of events are shown here for brevity, but a server can subscribe to any event that can be logged to the journal.\n\nNote that requesting some events can cause a lot of traffic to your server, for example FSSSignalDiscovered when entering a large system. Ensure you only request the specific events you need when responding to the discovery endpoint.",
                        "enum": [
                            "ApproachSettlement",
                            "CarrierJump",
                            "CommitCrime",
                            "Died",
                            "Docked",
                            "FactionKillBond",
                            "FSDJump",
                            "Location",
                            "MarketBuy",
                            "MarketSell",
                            "MissionAbandoned",
                            "MissionAccepted",
                            "MissionCompleted",
                            "MissionFailed",
                            "MultiSellExplorationData",
                            "RedeemVoucher",
                            "SellExplorationData",
                            "StartUp",
                            "ShipTargeted"
                        ],
                        "type": "string",
                        "example": "Location"
                    },
                    "timestamp": {
                        "$ref": "#/components/schemas/Timestamp",
                        "description": "Timestamp of an event in YYYY-mm-ddTHH:MM:SS.SSSZ format. Also an attribute of the journal event"
                    },
                    "tickid": {
                        "$ref": "#/components/schemas/TickID",
                        "description": "The ID of the tick this activity should be associated with. This ID is usually generated by the tick detector and is unique but if a tick is forced by the user, a 24 digit tickid will be generated by BGS-Tally with six leading zeroes to identify it as a forced tick.",
                        "maxLength": 24,
                        "minLength": 24,
                        "example": "639f422026842f7295280669"
                    },
                    "cmdr": {
                        "description": "The Commander name",
                        "type": "string"
                    },
                    "StarSystem": {
                        "description": "Augments:\n- Every event without a 'System', 'SystemName' or 'StarSystem' property\n\nEnhance every event with the current StarSystem.\n\nSpecial case(s):\n- MissionFailed, MissionAbandoned : Sends the System where the associated mission was accepted. Not the current System.",
                        "type": "string",
                        "example": "Mahia"
                    },
                    "SystemAddress": {
                        "format": "int64",
                        "description": "Augments:\n- Every event without a 'SystemAddress' property\n\nEnhance every event with the current SystemAddress.\n\nSpecial case(s):\n- MissionFailed, MissionAbandoned : Sends the SystemAddress where the associated mission was accepted. Not the current SystemAddress.",
                        "type": "integer",
                        "example": "358864491242"
                    },
                    "DemandBracket": {
                        "description": "Augments:\n- MarketSell\n\nEnhance every MarketSell event with information available from Market.json\n",
                        "type": "integer"
                    },
                    "Demand": {
                        "description": "Augments:\n- MarketSell\n\nEnhance every MarketSell event with information available from Market.json",
                        "type": "integer"
                    },
                    "StockBracket": {
                        "description": "Augments:\n- MarketBuy\n\nEnhance every MarketBuy event with information available from Market.json",
                        "type": "integer"
                    },
                    "Stock": {
                        "description": "Augments:\n- MarketBuy\n\nEnhance every MarketBuy event with information available from Market.json",
                        "type": "integer"
                    },
                    "StationFaction": {
                        "description": "If present in journal event:\n- Journal event 'StationFaction' value is passed, which is an object containing a single 'Name' property\n\nOtherwise:\n- Augments every event without a 'Faction', 'Factions', 'FactionEffects', 'SystemFaction' or 'StationFaction' property with a string .\n\nIf Docked, enhance with the StationFaction.\nOtherwise, enhance with the SystemFaction.\n\nSpecial case(s):\n- MissionFailed, MissionAbandoned: Sends the Faction from which the associated mission was accepted.",
                        "type": "string"
                    },
                    "ticktime": {
                        "$ref": "#/components/schemas/Timestamp",
                        "description": "The timestamp for this tick. Note that if this was a tick forced by the user, this will be the time it was forced."
                    }
                }
            },
            "EventsSyntheticCZObjective": {
                "title": "EventsSyntheticCZObjective",
                "description": "Conflict Zone objective synthetic event",
                "type": "object",
                "allOf": [
                    {
                        "required": [
                            "count",
                            "event"
                        ],
                        "type": "object",
                        "properties": {
                            "count": {
                                "description": "How many completed",
                                "type": "integer"
                            },
                            "type": {
                                "description": "The type of objective completed",
                                "enum": [
                                    "CapShip",
                                    "SpecOps",
                                    "WarzoneGeneral",
                                    "WarzoneCorrespondent"
                                ],
                                "type": "string",
                                "example": "CapShip"
                            },
                            "event": {
                                "description": "Synthetic event type. Always SyntheticCZObjective for this event.",
                                "default": "SyntheticCZObjective",
                                "type": "string",
                                "example": "SyntheticCZObjective"
                            }
                        }
                    },
                    {
                        "$ref": "#/components/schemas/EventsSyntheticAbstractEvent"
                    }
                ],
                "example": {
                    "timestamp": "2024-02-27T03:15:15Z",
                    "StarSystem": "HIP 114736",
                    "SystemAddress": 2832698610402,
                    "Faction": "HIP 114736 Creative Corporation",
                    "low": 1
                }
            },
            "EventsSyntheticAbstractEvent": {
                "title": "EventsSyntheticAbstractEvent",
                "description": "Synthetic Conflict Zone event",
                "required": [
                    "Faction",
                    "SystemAddress",
                    "timestamp",
                    "event"
                ],
                "type": "object",
                "properties": {
                    "timestamp": {
                        "format": "date-time",
                        "description": "Time of the event",
                        "type": "string"
                    },
                    "StarSystem": {
                        "description": "System name in which the event takes place",
                        "type": "string",
                        "example": "Mahia"
                    },
                    "SystemAddress": {
                        "format": "int64",
                        "description": "System in which the event takes place",
                        "type": "integer",
                        "example": "358864491242"
                    },
                    "Faction": {
                        "description": "Faction the event was completed for",
                        "type": "string"
                    },
                    "cmdr": {
                        "description": "CMDR name",
                        "type": "string"
                    },
                    "event": {
                        "description": "Synthetic Event Type. Derived schemas must specify default.",
                        "type": "string",
                        "example": "SyntheticSpaceCZ"
                    },
                    "tickid": {
                        "$ref": "#/components/schemas/TickID",
                        "description": "The ID of the tick this activity should be associated with. This ID is usually generated by the tick detector and is unique but if a tick is forced by the user, a 24 digit tickid will be generated by BGS-Tally with six leading zeroes to identify it as a forced tick.",
                        "example": "639f422026842f7295280669"
                    },
                    "ticktime": {
                        "$ref": "#/components/schemas/Timestamp",
                        "description": "The timestamp for this tick. Note that if this was a tick forced by the user, this will be the time it was forced."
                    }
                },
                "example": {
                    "timestamp": "2024-02-27T03:15:15Z",
                    "StarSystem": "HIP 114736",
                    "SystemAddress": 2832698610402,
                    "Faction": "HIP 114736 Creative Corporation",
                    "low": 1
                }
            },
            "EventsSyntheticGroundCZ": {
                "title": "EventsSyntheticGroundCZ",
                "description": "Synthetic Conflict Zone Ground event",
                "type": "object",
                "allOf": [
                    {
                        "required": [
                            "event"
                        ],
                        "type": "object",
                        "properties": {
                            "low": {
                                "description": "Low CZ count completed",
                                "type": "integer",
                                "example": "-1"
                            },
                            "high": {
                                "description": "High CZ count completed",
                                "type": "integer",
                                "example": "1"
                            },
                            "settlement": {
                                "description": "Name of the settlement",
                                "type": "string",
                                "example": "Aussi's Manufacturing Silo"
                            },
                            "event": {
                                "description": "Synthetic event type. Always SyntheticGroundCZ for this event.",
                                "default": "SyntheticGroundCZ",
                                "type": "string",
                                "example": "SyntheticGroundCZ"
                            },
                            "medium": {
                                "description": "Medium CZ count completed",
                                "type": "integer",
                                "example": "2"
                            }
                        }
                    },
                    {
                        "$ref": "#/components/schemas/EventsSyntheticAbstractEvent"
                    }
                ],
                "example": {
                    "timestamp": "2024-02-27T03:15:15Z",
                    "StarSystem": "HIP 114736",
                    "SystemAddress": 2832698610402,
                    "Faction": "HIP 114736 Creative Corporation",
                    "low": 1
                }
            },
            "EventsSyntheticScenario": {
                "title": "EventsSyntheticScenario",
                "description": "Scenario synthetic event",
                "type": "object",
                "allOf": [
                    {
                        "required": [
                            "count",
                            "event"
                        ],
                        "type": "object",
                        "properties": {
                            "count": {
                                "description": "Scenario count completed",
                                "type": "integer",
                                "example": "1"
                            },
                            "type": {
                                "description": "Type of Scenario completed, if available",
                                "enum": [
                                    "Megaship",
                                    "Installation"
                                ],
                                "type": "string",
                                "example": "Megaship"
                            },
                            "event": {
                                "description": "Synthetic event type. Always SyntheticScenario for this event.",
                                "default": "SyntheticScenario",
                                "type": "string",
                                "example": "SyntheticScenario"
                            }
                        }
                    },
                    {
                        "$ref": "#/components/schemas/EventsSyntheticAbstractEvent"
                    }
                ],
                "example": {
                    "timestamp": "2024-02-27T03:15:15Z",
                    "StarSystem": "HIP 114736",
                    "SystemAddress": 2832698610402,
                    "Faction": "HIP 114736 Creative Corporation",
                    "low": 1
                }
            },
            "EventsSyntheticSpaceCZ": {
                "title": "EventsSyntheticCZ",
                "description": "Conflict Zone synthetic event",
                "type": "object",
                "allOf": [
                    {
                        "required": [
                            "event"
                        ],
                        "type": "object",
                        "properties": {
                            "low": {
                                "description": "Low CZ count completed (can be negative if user manually decrements)",
                                "type": "integer",
                                "example": "-1"
                            },
                            "high": {
                                "description": "High CZ count completed (can be negative if user manually decrements)",
                                "type": "integer",
                                "example": "1"
                            },
                            "event": {
                                "description": "Synthetic event type. Always SyntheticSpaceCZ for this event.",
                                "default": "SyntheticCZ",
                                "type": "string",
                                "example": "SyntheticSpaceCZ"
                            },
                            "medium": {
                                "description": "Medium CZ count completed (can be negative if user manually decrements)",
                                "type": "integer",
                                "example": "2"
                            }
                        }
                    },
                    {
                        "$ref": "#/components/schemas/EventsSyntheticAbstractEvent"
                    }
                ],
                "example": {
                    "timestamp": "2024-02-27T03:15:15Z",
                    "StarSystem": "HIP 114736",
                    "SystemAddress": 2832698610402,
                    "Faction": "HIP 114736 Creative Corporation",
                    "low": 1
                }
            },
            "DiscoveryEndpoints": {
                "description": "A container for describing API Endpoints",
                "type": "object",
                "properties": {
                    "activities": {
                        "$ref": "#/components/schemas/DiscoveryEndpoint",
                        "description": "The configuration of the activities endpoint."
                    },
                    "events": {
                        "$ref": "#/components/schemas/DiscoveryEndpoint",
                        "description": "The configuration of the events endpoint"
                    },
                    "objectives": {
                        "$ref": "#/components/schemas/DiscoveryEndpoint",
                        "description": "The configuration of the objectives endpoint"
                    }
                }
            },
            "ObjectivesMission": {
                "description": "A mission",
                "required": [
                    "type",
                    "system",
                    "faction",
                    "targets"
                ],
                "type": "object",
                "properties": {
                    "title": {
                        "description": "The mission, intended to be shown to the player in-game. If this is omitted, a default description for this mission should be generated from the mission type.",
                        "type": "string",
                        "example": "Go to War in Sol!"
                    },
                    "priority": {
                        "description": "The mission priority. Missions should be presented in priority order.",
                        "type": "integer",
                        "example": "1"
                    },
                    "startdate": {
                        "$ref": "#/components/schemas/Timestamp",
                        "description": "Start date for the mission in YYYY-mm-ddTHH:MM:SS.SSSZ format. If no startdate is specified, clients should calculate the user's progress using just activity within the current Tick."
                    },
                    "enddate": {
                        "$ref": "#/components/schemas/Timestamp",
                        "description": "The end date for a mission. It is expected that a server will simply exclude the mission once this date is passed, but the enddate is included so that clients can cache this date in case the server connection is lost."
                    },
                    "type": {
                        "description": "The Mission type.\n\n- recon: Reconnaissance mission\n- win_war: Win a war for a faction\n- draw_war - Draw a war for a faction\n- win_election - Win an election for a faction\n- draw_election - Draw an election for a faction\n- boost - Boost the influence of a faction\n- expand - Expand a faction from a system\n- reduce - Reduce the influence of a faction\n- retreat - Retreat a faction from a system\n- equalise - Equalise two factions",
                        "enum": [
                            "recon",
                            "win_war",
                            "draw_war",
                            "win_election",
                            "draw_election",
                            "boost",
                            "expand",
                            "reduce",
                            "retreat",
                            "equalise"
                        ],
                        "type": "string",
                        "example": "win_war"
                    },
                    "system": {
                        "description": "The name of the system to target",
                        "type": "string"
                    },
                    "faction": {
                        "description": "The name of the primary faction for this mission. If no faction is specified for a MissionTarget, then this faction is used.",
                        "type": "string"
                    },
                    "targets": {
                        "description": "One or more Targets to achieve for this mission.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ObjectivesMissionTarget"
                        }
                    },
                    "description": {
                        "description": "A more detailed description of the mission.",
                        "type": "string"
                    }
                }
            },
            "ObjectivesMissionTarget": {
                "description": "A target to achieve as part of a Mission.",
                "required": [
                    "type"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "description": "The Target type. One of:\n\n- visit: Visit a system or station\n- inf: Generate positive / negative INF for a faction \n- bv: Hand in bounty vouchers for a faction\n- cb: Hand in combat bonds for a faction\n- expl: Hand in exploration data for a faction\n- trade_prof: Generate trade profit for a faction\n- bm_prof: Generate black market profit for a faction\n- ground_cz: Win ground conflict zones for a faction\n- space_cz: Win space conflict zones for a faction\n- murder: Murder targets associated with a faction\n- mission_fail: Fail missions for a faction",
                        "enum": [
                            "visit",
                            "inf",
                            "bv",
                            "cb",
                            "expl",
                            "trade_prof",
                            "bm_prof",
                            "ground_cz",
                            "space_cz",
                            "murder",
                            "mission_fail"
                        ],
                        "type": "string"
                    },
                    "station": {
                        "description": "The target station name. Only applicable for 'visit' Targets when a specific station needs visiting.",
                        "type": "string"
                    },
                    "progress": {
                        "description": "The overall aggregated progress towards the target, across all CMDRs. If not present, no overall progress will be reported in the client.\n\nIn the case of Target type 'visit', the value should be '1' (visited) or '0' (not visited)",
                        "type": "integer"
                    },
                    "system": {
                        "description": "The target system name. If not present, inherited from the Mission.",
                        "type": "string"
                    },
                    "faction": {
                        "description": "The target faction name. If not present, inherited from the Mission.",
                        "type": "string"
                    },
                    "settlements": {
                        "description": "For ground_cz Targets, a list of specific target settlements to win.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ObjectivesMissionTargetSettlement"
                        }
                    },
                    "targetindividual": {
                        "description": "The target value for individual CMDRs. Always an integer, but the meaning will depend on the Target's type:\n\n- visit: Not used\n- inf: The +/- INF change to make\n- bv: The CR value of BVs to hand in\n- cb: The CR value of CBs to hand in\n- expl: The CR value of exploration data to hand in\n- trade_prof: The CR value of trade profit to make\n- bm_prof: The CR value of black market profit to make\n- ground_cz: The number of CZ wins to achieve\n- space_cz: The number of CZ wins to achieve\n- murder: The number of murders to complete\n- mission_fail: The number of missions to fail",
                        "type": "integer"
                    },
                    "targetoverall": {
                        "description": "The target value across all CMDRs. Always an integer, but the meaning will depend on the Target's type:\n\n- visit: Not used\n- inf: The +/- INF change to make\n- bv: The CR value of BVs to hand in\n- cb: The CR value of CBs to hand in\n- expl: The CR value of exploration data to hand in\n- trade_prof: The CR value of trade profit to make\n- bm_prof: The CR value of black market profit to make\n- ground_cz: The number of CZ wins to achieve\n- space_cz: The number of CZ wins to achieve\n- murder: The number of murders to complete\n- mission_fail: The number of missions to fail",
                        "type": "integer"
                    }
                }
            },
            "ObjectivesMissionTargetSettlement": {
                "description": "Details of an individual target settlement.",
                "required": [
                    "name",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "description": "The name of the settlement.",
                        "type": "string"
                    },
                    "targetindividual": {
                        "description": "The number of wins to achieve at this settlement per CMDR.",
                        "type": "integer"
                    },
                    "targetoverall": {
                        "description": "The number of wins to achieve at this settlement across all CMDRs.",
                        "type": "integer"
                    },
                    "progress": {
                        "description": "The overall aggregated number of wins at this settlement, across all CMDRs. If not present, no overall progress will be reported in the client.",
                        "type": "integer"
                    }
                }
            }
        },
        "securitySchemes": {
            "KeyAccessSecurityScheme": {
                "type": "apiKey",
                "description": "Access to the API via a key generated server-side.",
                "name": "apikey",
                "in": "header"
            }
        }
    },
    "security": [
        {
            "KeyAccessSecurityScheme": [
            ]
        }
    ]
}